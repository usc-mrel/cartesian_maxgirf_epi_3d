function [F, dF_dw] = siemens_calculate_slice_curvation_residual(w, v_ideal, u_ideal, w_ideal, R_gcs2dcs, dcs_offset, alpha_x, beta_x, alpha_y, beta_y, alpha_z, beta_z, R0, Gref)
% Calculate F(w) and dF(w)/dw

%% Calculate the spatial coordinates of a voxel in the DCS [m]
r_gcs = cat(1, v_ideal, u_ideal, w); % 3 x 1 [PE,RO,SL]
r_dcs = R_gcs2dcs * r_gcs + dcs_offset; % 3 x 1
x = r_dcs(1);
y = r_dcs(2);
z = r_dcs(3);

%% Convert Cartesian coordinates to spherical coordinates
radius = sqrt(x.^2 + y.^2 + z.^2); % 1 x 1 [m]
theta = atan2(sqrt(x.^2 + y.^2), z); % same as acos(z./r)
phi = atan2(y, x); % azimuth

%% Calculate the nonlinear Bz field [mT] generated by the X gradient coil
Bzx_nonlinear = siemens_B(radius, theta, phi, R0, alpha_x, beta_x); % [mT]

%% Calculate the nonlinear Bz field [mT] generated by the Y gradient coil
Bzy_nonlinear = siemens_B(radius, theta, phi, R0, alpha_y, beta_y); % [mT]

%% Calculate the nonlinear Bz field [mT] generated by the Z gradient coil
Bzz_nonlinear = siemens_B(radius, theta, phi, R0, alpha_z, beta_z); % [mT]

%% Calculate dr in the DCS [m]
% [?] / [mT/m] = [m] => [?] = [m] * [mT/m] => [mT]
dx = Bzx_nonlinear / Gref;
dy = Bzy_nonlinear / Gref;
dz = Bzz_nonlinear / Gref;

%% Define parameters
R13 = R_gcs2dcs(1,3);
R23 = R_gcs2dcs(2,3);
R33 = R_gcs2dcs(3,3);

%% Calculate the residual
F = w - w_ideal + R13 * dx + R23 * dy + R33 * dz;

if nargout == 2
    %% Calculate d(Delta x) / dx
    dDeltax_dx = siemens_calculate_derivative_disp_field_wrt_x(radius, theta, phi, R0, alpha_x, beta_x, Gref);

    %% Calculate d(Delta x) / dy
    dDeltax_dy = siemens_calculate_derivative_disp_field_wrt_y(radius, theta, phi, R0, alpha_x, beta_x, Gref);

    %% Calculate d(Delta x) / dz
    dDeltax_dz = siemens_calculate_derivative_disp_field_wrt_z(radius, theta, phi, R0, alpha_x, beta_x, Gref);

    %% Calculate d(Delta y) / dx
    dDeltay_dx = siemens_calculate_derivative_disp_field_wrt_x(radius, theta, phi, R0, alpha_y, beta_y, Gref);

    %% Calculate d(Delta y) / dy
    dDeltay_dy = siemens_calculate_derivative_disp_field_wrt_y(radius, theta, phi, R0, alpha_y, beta_y, Gref);

    %% Calculate d(Delta y) / dz
    dDeltay_dz = siemens_calculate_derivative_disp_field_wrt_z(radius, theta, phi, R0, alpha_y, beta_y, Gref);

    %% Calculate d(Delta z) / dx
    dDeltaz_dx = siemens_calculate_derivative_disp_field_wrt_x(radius, theta, phi, R0, alpha_z, beta_z, Gref);

    %% Calculate d(Delta z) / dy
    dDeltaz_dy = siemens_calculate_derivative_disp_field_wrt_y(radius, theta, phi, R0, alpha_z, beta_z, Gref);

    %% Calculate d(Delta z) / dz
    dDeltaz_dz = siemens_calculate_derivative_disp_field_wrt_z(radius, theta, phi, R0, alpha_z, beta_z, Gref);

    %% Calculate the derivative of the residual with respect to w
    dF_dw = 1 + R13 * (R13 * dDeltax_dx + R23 * dDeltax_dy + R33 * dDeltax_dz) + ...
                R23 * (R13 * dDeltay_dx + R23 * dDeltay_dy + R33 * dDeltay_dz) + ...
                R33 * (R13 * dDeltaz_dx + R23 * dDeltaz_dy + R33 * dDeltaz_dz);
end

end